name: Build Espressif LLVM

on:
  push:
    tags:
      - '*'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'release.sh'
      - '.github/workflows/release.yml'
      - '**.md'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (optional, uses current commit if empty)'
        required: false
        type: string
      branch_prefix:
        description: 'Branch prefix (default: release/esp_)'
        required: false
        default: 'release/esp_'
        type: string
      upload:
        description: 'Upload release assets'
        required: true
        default: false
        type: boolean

permissions:
  contents: write

# Concurrency control to prevent multiple builds for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      branch_prefix: ${{ steps.vars.outputs.branch_prefix }}
      upload: ${{ steps.vars.outputs.upload }}
      version_string: ${{ steps.vars.outputs.version_string }}

    steps:
    - name: Determine tag and version
      id: vars
      run: |
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          # Tag push - create release
          tag="${{ github.ref_name }}"
          branch_prefix="release/esp_"
          upload="true"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          # PR build - no release, use PR number
          tag="20.x_20250911"
          branch_prefix="release/esp_"
          upload="false"
        elif [ -n "${{ inputs.tag }}" ]; then
          # Manual trigger with tag
          tag="${{ inputs.tag }}"
          branch_prefix="${{ inputs.branch_prefix || 'release/esp_' }}"
          upload="${{ inputs.upload }}"
        else
          echo "No tag specified and not a tag push event"
          exit 1
        fi

        version_string="esp-$tag"

        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "branch_prefix=$branch_prefix" >> $GITHUB_OUTPUT
        echo "upload=$upload" >> $GITHUB_OUTPUT
        echo "version_string=$version_string" >> $GITHUB_OUTPUT

        echo "Build configuration:"
        echo "  Event: ${{ github.event_name }}"
        echo "  Tag: $tag"
        echo "  Branch Prefix: $branch_prefix"
        echo "  Version String: $version_string"
        echo "  Upload: $upload"

  build:
    name: Build esp-clang for ${{ matrix.target }}
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 build
          - target: x86_64-linux-gnu
            os: ubuntu-22.04
            runner: ubuntu-22.04
            container: ubuntu:20.04

          # Linux ARM64 build
          - target: aarch64-linux-gnu
            os: ubuntu-22.04-arm
            runner: ubuntu-22.04-arm
            container: ubuntu:20.04

          # macOS x86_64 build
          - target: x86_64-apple-darwin
            os: macos-13
            runner: macos-13

          # macOS ARM64 build
          - target: aarch64-apple-darwin
            os: macos-14
            runner: macos-14

    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install build dependencies (Linux containers)
      if: matrix.container == 'ubuntu:20.04'
      run: |
        export DEBIAN_FRONTEND=noninteractive
        
        # Use HTTP mirrors to avoid certificate issues
        sed -i 's|http://archive.ubuntu.com/ubuntu/|http://mirrors.kernel.org/ubuntu/|g' /etc/apt/sources.list
        sed -i 's|http://security.ubuntu.com/ubuntu/|http://mirrors.kernel.org/ubuntu/|g' /etc/apt/sources.list
        
        apt-get update --fix-missing
        apt-get install -y build-essential ninja-build git ca-certificates wget python3 python3-pip
        
        # Install newer CMake (LLVM requires 3.20+, Ubuntu 20.04 has 3.16)
        CMAKE_VERSION="3.25.3"
        CMAKE_ARCH="x86_64"
        if [ "${{ matrix.target }}" = "aarch64-linux-gnu" ]; then
          CMAKE_ARCH="aarch64"
        fi
        
        echo "Matrix target: ${{ matrix.target }}"
        echo "CMAKE_ARCH: ${CMAKE_ARCH}"
        echo "Download URL: https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-${CMAKE_ARCH}.tar.gz"
        
        wget -O cmake.tar.gz "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-${CMAKE_ARCH}.tar.gz"
        tar -xzf cmake.tar.gz -C /opt
        ln -sf /opt/cmake-${CMAKE_VERSION}-linux-${CMAKE_ARCH}/bin/* /usr/local/bin/
        rm cmake.tar.gz
        cmake --version

    - name: Install build dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04-arm' && matrix.container != 'ubuntu:20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Install build dependencies (macOS)
      if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
      run: |
        brew uninstall cmake || true
        brew install cmake ninja

    - name: Build esp-clang package
      shell: bash
      env:
        TAG: ${{ needs.prepare.outputs.tag }}
        BRANCH_PREFIX: ${{ needs.prepare.outputs.branch_prefix }}
      run: ./release.sh ${{ matrix.target }}

    - name: List generated packages
      shell: bash
      run: |
        echo "Generated packages:"
        ls -la dist/*.tar.xz 2>/dev/null || echo "No packages found in dist/"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-esp-clang-packages
        path: |
          dist/*.tar.xz
        # Shorter retention for PR builds, longer for releases
        retention-days: ${{ github.event_name == 'pull_request' && 7 || 30 }}

  release:
    name: Create Release
    needs: [prepare, build]
    if: needs.prepare.outputs.upload == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        find artifacts -name "*.tar.xz" -exec mv {} . \;
        echo "Release files:"
        ls -la *.tar.xz

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        name: "Espressif LLVM ${{ needs.prepare.outputs.tag }}"
        draft: false
        prerelease: false
        files: "*.tar.xz"
        token: ${{ secrets.GITHUB_TOKEN }}
